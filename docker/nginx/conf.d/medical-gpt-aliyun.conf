# 医疗健康AI助手 - 阿里云Nginx配置
# 版本: 2.0
# 优化: 专为阿里云ECS服务器优化

# 上游服务器配置
upstream php_backend {
    server gptserver:9000;
    keepalive 32;
}

# 限流配置
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=web_limit:10m rate=20r/s;

# 连接数限制
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# 日志格式
log_format medical_access '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '$request_time $upstream_response_time '
                         '$upstream_addr $upstream_status';

# 缓存配置
proxy_cache_path /var/cache/nginx/medical levels=1:2 keys_zone=medical_cache:100m 
                 max_size=1g inactive=60m use_temp_path=off;

# 主服务器配置
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # 服务器基本配置
    root /var/www/html/public;
    index index.php index.html index.htm;
    
    # 字符集
    charset utf-8;
    
    # 客户端配置
    client_max_body_size 50M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # 连接限制
    limit_conn conn_limit 20;
    
    # 访问日志
    access_log /var/log/nginx/medical-access.log medical_access;
    error_log /var/log/nginx/medical-error.log warn;
    
    # 安全头部
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.openai.com;" always;
    
    # 自定义头部
    add_header X-Powered-By "Medical AI Assistant v2.0" always;
    add_header X-Server-Location "Aliyun ECS" always;
    add_header X-Cache-Status $upstream_cache_status always;
    
    # 隐藏Nginx版本
    server_tokens off;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|tar|gz)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";
        
        # 跨域配置
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        
        # 处理OPTIONS请求
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # 前端静态文件
    location /web/ {
        alias /var/www/html/public/web/;
        try_files $uri $uri/ @frontend_fallback;
        
        # 限流
        limit_req zone=web_limit burst=50 nodelay;
        
        # 缓存配置
        expires 1h;
        add_header Cache-Control "public";
        
        # 安全头部
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # 前端回退
    location @frontend_fallback {
        rewrite ^.*$ /web/index.html last;
    }
    
    # 管理后台API接口
    location /admin/ {
        # 限流配置
        limit_req zone=admin_limit burst=20 nodelay;
        
        # 代理配置
        proxy_pass http://php_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓冲配置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # 请求体大小限制
        client_max_body_size 10M;
        
        # CORS配置
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-CSRF-Token" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-CSRF-Token";
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
    }
    
    # 公共API接口
    location /api/ {
        # 限流配置
        limit_req zone=api_limit burst=30 nodelay;
        
        # 代理配置
        proxy_pass http://php_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # 缓冲配置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # 请求体大小限制
        client_max_body_size 20M;
        
        # 缓存配置（仅对GET请求）
        proxy_cache medical_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        
        # CORS配置
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
    }
    
    # OpenAI聊天接口代理
    location /openai/ {
        # 限流配置（更严格）
        limit_req zone=api_limit burst=10 nodelay;
        
        # 代理配置
        proxy_pass http://php_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时配置（更长的超时时间）
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # 禁用缓冲（流式响应）
        proxy_buffering off;
        proxy_request_buffering off;
        
        # 请求体大小限制
        client_max_body_size 5M;
        
        # CORS配置
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
    }
    
    # 健康检查接口
    location /health {
        access_log off;
        return 200 '{"status":"ok","timestamp":"$time_iso8601","server":"nginx"}';
        add_header Content-Type application/json;
    }
    
    # Nginx状态监控（仅内网访问）
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # PHP-FPM状态监控（仅内网访问）
    location ~ ^/(fpm_status|fpm_ping)$ {
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        fastcgi_pass php_backend;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
    
    # 上传文件处理
    location /uploads/ {
        alias /var/www/html/storage/uploads/;
        
        # 安全配置
        location ~* \.(php|php3|php4|php5|phtml|pl|py|jsp|asp|sh|cgi)$ {
            deny all;
        }
        
        # 缓存配置
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # 默认PHP处理
    location ~ \.php$ {
        try_files $uri =404;
        
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php_backend;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        
        # FastCGI参数
        include fastcgi_params;
        
        # 超时配置
        fastcgi_connect_timeout 30s;
        fastcgi_send_timeout 300s;
        fastcgi_read_timeout 300s;
        
        # 缓冲配置
        fastcgi_buffering on;
        fastcgi_buffer_size 4k;
        fastcgi_buffers 8 4k;
        fastcgi_busy_buffers_size 8k;
        
        # 临时文件配置
        fastcgi_temp_file_write_size 8k;
        fastcgi_max_temp_file_size 128m;
    }
    
    # 默认路由（前端应用）
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        
        # 限流
        limit_req zone=web_limit burst=100 nodelay;
    }
    
    # 安全配置 - 禁止访问敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(env|git|svn|htaccess|htpasswd|ini|log|sh|sql|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问特定目录
    location ~ ^/(storage|bootstrap|config|database|resources|routes|tests|vendor)/ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS配置（可选，需要SSL证书）
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name www.medicalgpt.asia;
#     
#     # SSL证书配置
#     ssl_certificate /opt/medical-gpt/ssl_certs/cert.pem;
#     ssl_certificate_key /opt/medical-gpt/ssl_certs/key.pem;
#     
#     # SSL配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # 其他配置与HTTP相同...
# }

# HTTP重定向到HTTPS（启用HTTPS时取消注释）
# server {
#     listen 80;
#     listen [::]:80;
#     server_name www.medicalgpt.asia;
#     return 301 https://$server_name$request_uri;
# }